syntax = "proto3";

package higgins;

enum ConsumerOffsetType {
  FROM_TIMESTAMP = 0;
  FROM_OFFSET = 1;
  CURRENT = 2;
  FROM_BEGINNING = 3;
}

message CreateSubscriptionRequest {
  bytes stream_name = 1;
  ConsumerOffsetType offset_type = 2;
  optional uint64 timestamp = 3;
  optional uint64 offset = 4;
}

message CreateSubscriptionResponse {
  repeated string errors = 1;
  optional bytes subscription_id = 2;
}

message TakeRecordsRequest {
  uint64 n = 1;
  bytes stream_name = 2;
  bytes subscription_id = 3;
}

message Record {
  bytes data = 1;
  bytes stream = 2;
  bytes partition = 3;
  uint64 offset = 4;
}

message TakeRecordsResponse { repeated Record records = 1; }

message ProduceRequest {
  bytes stream_name = 1;
  bytes partition_key = 2;
  bytes payload = 3;
}

message ProduceResponse { repeated string errors = 1; }

message MetadataRequest { string name = 1; }

message MetadataResponse { string message = 1; }

message Ping {}

message Pong {}

message CreateConfigurationRequest { bytes data = 1; }

message CreateConfigurationResponse { repeated string errors = 1; }

message DeleteConfigurationRequest { bytes key = 1; }

message DeleteConfigurationResponse { repeated string errors = 1; }

// Upload Module.
message UploadModuleRequest {
  string name = 1;
  bytes value = 2;
}

message UploadModuleResponse { repeated string errors = 1; }

// Query to get the index at a specific time or offset.
message GetIndexRequest { repeated Index indexes = 1; }
message GetIndexResponse { repeated Record records = 1; }

message Index {
  enum Type {
    TIMESTAMP = 0;
    LATEST = 1;
    OFFSET = 2;
  }

  Type type = 1;
  bytes stream = 2;
  bytes partition = 3;
  optional uint64 timestamp = 4;
  optional uint64 index = 5;
}

message Error {
  enum Type {
    UNIMPLEMENTED = 0;
    UNKNOWN = 1;
  }

  Type type = 1;
}

message Message {

  enum Type {
    ERROR = 0;
    CREATESUBSCRIPTIONREQUEST = 1;
    CREATESUBSCRIPTIONRESPONSE = 2;
    PRODUCEREQUEST = 3;
    PRODUCERESPONSE = 4;
    METADATAREQUEST = 5;
    METADATARESPONSE = 6;
    PING = 7;
    PONG = 8;
    TAKERECORDSREQUEST = 9;
    TAKERECORDSRESPONSE = 10;

    CREATECONFIGURATIONREQUEST = 11;
    CREATECONFIGURATIONRESPONSE = 12;

    DELETECONFIGURATIONREQUEST = 13;
    DELETECONFIGURATIONRESPONSE = 14;

    GETINDEXREQUEST = 15;
    GETINDEXRESPONSE = 16;

    UPLOADMODULEREQUEST = 17;
    UPLOADMODULERESPONSE = 18;
  }

  Type type = 1;

  optional Error error = 2;
  optional CreateSubscriptionRequest createSubscriptionRequest = 3;
  optional CreateSubscriptionResponse createSubscriptionResponse = 4;
  optional ProduceRequest produceRequest = 5;
  optional ProduceResponse produceResponse = 6;
  optional MetadataRequest metadataRequest = 7;
  optional MetadataResponse metadataResponse = 8;
  optional Ping ping = 9;
  optional Pong pong = 10;
  optional TakeRecordsRequest TakeRecordsRequest = 11;
  optional TakeRecordsResponse TakeRecordsResponse = 12;
  optional CreateConfigurationRequest createConfigurationRequest = 13;
  optional CreateConfigurationResponse createConfigurationResponse = 14;
  optional DeleteConfigurationRequest deleteConfigurationRequest = 15;
  optional DeleteConfigurationResponse deleteConfigurationResponse = 16;
  optional GetIndexRequest getIndexRequest = 17;
  optional GetIndexResponse getIndexResponse = 18;
  optional UploadModuleRequest uploadModuleRequest = 19;
  optional UploadModuleResponse uploadModuleResponse = 20;
}